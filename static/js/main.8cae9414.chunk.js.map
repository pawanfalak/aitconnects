{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","onerror","e","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","console","log","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","alert","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","TextAreaRef","React","createRef","didTweet","handleBackendUpdate","onSubmit","newVal","current","value","ref","required","TweetComponents","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","StrictMode","tweetEl","createElement","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,gLCgBpC,SAASC,EAAeC,EAAQC,EAAUC,EAAUC,GACzD,IAAIC,EACDD,IACDC,EAAUC,KAAKC,UAAUH,IAE3B,IAAMI,EAAK,IAAIC,eACTC,EAAI,4BAAD,OAA8BR,GACvCM,EAAIG,aAAc,OAClB,IAAMC,EAxBR,SAAmBC,GACjB,IAAIC,EAAc,KAClB,GAAIC,SAASC,QAA8B,KAApBD,SAASC,OAE5B,IADA,IAAIC,EAAUF,SAASC,OAAOE,MAAM,KAC3BC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACrC,IAAIH,EAASC,EAAQE,GAAGE,OAExB,GAAIL,EAAOM,UAAU,EAAGT,EAAKO,OAAS,KAAQP,EAAO,IAAM,CACvDC,EAAcS,mBAAmBP,EAAOM,UAAUT,EAAKO,OAAS,IAChE,OAIZ,OAAON,EAWWU,CAAU,aAC5BhB,EAAIiB,KAAKxB,EAAOS,GACbE,IACFJ,EAAIkB,iBAAiB,eAAe,oBAEnClB,EAAIkB,iBAAiB,mBAAmB,kBACxClB,EAAIkB,iBAAiB,cAAcd,IAErCJ,EAAImB,OAAS,WACQ,MAAfnB,EAAIoB,SAEQ,kDADDpB,EAAIqB,SAASC,SAExBC,OAAOC,SAASC,KAAK,kCAGzB9B,EAASK,EAAIqB,SAASrB,EAAIoB,SAE5BpB,EAAI0B,QAAS,SAASC,GACpBhC,EAAS,CAAC,QAAU,wBAAyB,MAE/CK,EAAI4B,KAAK/B,GCxCJ,SAASgC,EAAUC,GAAO,IACtBC,EAAiCD,EAAjCC,MAAMC,EAA2BF,EAA3BE,OAAOC,EAAoBH,EAApBG,iBACdC,EAAOH,EAAMG,MAAOH,EAAMG,MAAQ,EAClCC,EAAUL,EAAMK,UAAWL,EAAMK,UAAU,yBAC3CC,EAAgBJ,EAAOK,QAAUL,EAAOK,QAAQ,SAEhDC,EAA2B,SAACjB,EAAUD,GAC1CmB,QAAQC,IAAInB,EAASD,GACN,MAAXA,GAA6B,MAAXA,IAAkBa,GAEtCA,EAAiBZ,EAASD,IAUxBiB,EAA0B,SAAhBL,EAAOS,KAAP,UAA2BP,EAA3B,YAAoCE,GAAkBA,EAEtE,OAAO,4BAAQD,UAAWA,EAAWO,QAPjB,SAACC,GACjBA,EAAMC,iBCfP,SAAwBC,EAASb,EAAQrC,GAE5CH,EAAc,OAAO,kBAAkBG,EAD1B,CAACmD,GAAGD,EAASb,OAAOA,IDe7Be,CAAehB,EAAMe,GAAId,EAAOS,KAAMH,KAKkBD,G,kBEtBzD,SAASW,EAAYlB,GAAO,IACxBC,EAASD,EAATC,MACP,OAAOA,EAAMkB,OAAS,yBAAKd,UAAU,OACnC,yBAAKA,UAAU,qCACb,uBAAGA,UAAU,yBAAb,WACA,kBAACe,EAAD,CAAOC,aAAW,EAAChB,UAAW,IAAKJ,MAAOA,EAAMkB,WAE5C,KAGL,SAASC,EAAMpB,GAAO,IAClBC,EAA8BD,EAA9BC,MAAMqB,EAAwBtB,EAAxBsB,WAAWD,EAAarB,EAAbqB,YADA,EAEaE,mBAASvB,EAAMC,MAAQD,EAAMC,MAAQ,MAFlD,mBAEjBuB,EAFiB,KAELC,EAFK,KAGlBpB,EAAUL,EAAMK,UAAWL,EAAMK,UAAU,0BAE3CqB,EADOjC,OAAOC,SAASiC,SACVD,MAAL,YAAW,WAAX,cACRE,EAAaF,EAAQA,EAAMG,OAAOC,SAAW,EAC7CC,EAAW,UAAGH,KAAH,UAAqB3B,EAAMe,IAMtCgB,EAAsB,SAACC,EAAe3C,GAC9B,MAAXA,EACCmC,EAAeQ,GACC,MAAX3C,GACFgC,GACHA,EAAWW,IAKf,OAAO,yBAAK5B,UAAWA,GACrB,6BACI,2BAAIJ,EAAMe,GAAV,MAAiBf,EAAMiC,SACvB,kBAAChB,EAAD,CAAajB,MAAOA,KAExB,yBAAKI,UAAU,kBACK,IAAhBgB,GAAwBG,GAAgB,kBAAC,IAAMW,SAAP,KACtC,kBAACpC,EAAD,CAAWE,MAAOuB,EAAarB,iBAAkB6B,EAAqB9B,OAAQ,CAACS,KAAK,OAAOJ,QAAQ,WACnG,kBAACR,EAAD,CAAWE,MAAOuB,EAAarB,iBAAkB6B,EAAqB9B,OAAQ,CAACS,KAAK,SAASJ,QAAQ,YACrG,kBAACR,EAAD,CAAWE,MAAOuB,EAAarB,iBAAkB6B,EAAqB9B,OAAQ,CAACS,KAAK,UAAUJ,QAAQ,eAG3F,IAAbwB,EAAoB,KAAO,4BAAQ1B,UAAU,iCAAiCO,QA3B/D,SAACC,GACpBA,EAAMC,iBACNrB,OAAOC,SAASC,KAAhB,WAA2BM,EAAMe,MAyBF,U,WC7C9B,SAASoB,EAAWpC,GAAO,IAAD,EACOuB,mBAAS,IADhB,mBACtBc,EADsB,KACVC,EADU,OAEFf,mBAAS,IAFP,mBAEtBgB,EAFsB,KAEfC,EAFe,OAGUjB,oBAAS,GAHnB,mBAGtBkB,EAHsB,KAGTC,EAHS,KAI7BC,qBAAU,WACN,IAAMC,EAAQ,YAAI5C,EAAM6C,WAAWC,OAAOT,GACvCO,EAAM9D,SAAWyD,EAAOzD,QACvB0D,EAAUI,KAEhB,CAAC5C,EAAM6C,UAAUN,EAAOF,IAC1BM,qBAAU,WACR,IAAoB,IAAjBF,EAAuB,EFDzB,SAAsBM,EAASlF,GAClC,IAAID,EAAS,WACVmF,IACCnF,EAAQ,4BAAwBmF,IAEpCrF,EAAc,MAAME,EAASC,GEO3BmF,CAAahD,EAAM+C,UAVa,SAACxD,EAASD,GAExB,MAAXA,GACHgD,EAAc/C,GACdmD,GAAgB,IAGhBO,MAAM,8BAKT,CAACZ,EAAWI,EAAaC,EAAgB1C,EAAM+C,WAElD,IAAMG,EAAmB,SAACC,GACxB,IAAMC,EAAgB,YAAOf,GAC7Be,EAAiBC,QAAQF,GACzBb,EAAcc,GACd,IAAME,EAAiB,YAAOf,GAC9Be,EAAkBD,QAAQd,GAC1BC,EAAUc,IAGZ,OAAOf,EAAOgB,KAAI,SAACC,EAAMC,GACvB,OAAO,kBAACrC,EAAD,CACLnB,MAAOuD,EACPlC,WAAY4B,EACZ7C,UAAU,sCACVqD,IAAG,UAAKD,EAAL,oBCxCJ,SAASE,EAAY3D,GACxB,IAAM4D,EAAcC,IAAMC,YACnBC,EAAY/D,EAAZ+D,SACDC,EAAsB,SAACzE,EAAUD,GACvB,MAAXA,EACDyE,EAASxE,IAETkB,QAAQC,IAAInB,GACZ0D,MAAM,qBAUV,OAAO,yBAAK5C,UAAWL,EAAMK,WAC3B,0BAAM4D,SARa,SAACpD,GAClBA,EAAMC,iBACN,IAAMoD,EAASN,EAAYO,QAAQC,MHfvC1G,EAAc,OAAO,kBGiBKsG,EHjBsB,CAAC9B,QGiB9BgC,IACfN,EAAYO,QAAQC,MAAM,KAIxB,8BAAUC,IAAKT,EAAaU,UAAU,EAAMjE,UAAU,eAAe9B,KAAK,UAC1E,4BAAQoC,KAAK,SAASN,UAAU,wBAAhC,WCnBH,SAASkE,EAAgBvE,GAAO,IAAD,EACHuB,mBAAS,IADN,mBAC7BsB,EAD6B,KAClB2B,EADkB,KAG9BC,EAA8B,UAAnBzE,EAAMyE,SAMvB,OAAO,yBAAKpE,UAAWL,EAAMK,YACf,IAAXoE,GAAmB,kBAACd,EAAD,CAAaI,SANZ,SAACZ,GACtB,IAAIuB,EAAa,YAAO7B,GACxB6B,EAAcrB,QAAQF,GACtBqB,EAAaE,IAG8CrE,UAAU,gBACrE,kBAAC+B,EAAD,eAAYS,UAAWA,GAAe7C,KAInC,SAAS2E,EAAqB3E,GAAO,IACnCe,EAAWf,EAAXe,QADkC,EAERQ,oBAAS,GAFD,mBAElCqD,EAFkC,KAExBC,EAFwB,OAGhBtD,mBAAS,MAHO,mBAGlCtB,EAHkC,KAG5B6E,EAH4B,KAInCC,EAAqB,SAACxF,EAASD,GACpB,MAAXA,EACFwF,EAASvF,GAET0D,MAAM,gCAWV,OAPAN,qBAAU,YACU,IAAdiC,KJxBD,SAAwB7D,EAAQlD,GACnCH,EAAc,MAAD,kBAAkBqD,GAAUlD,GIwBvCmH,CAAejE,EAASgE,GACxBF,GAAa,MAEf,CAAC9D,EAAQ6D,EAAUC,IAEJ,OAAV5E,EAAiB,KAAO,kBAACmB,EAAD,CAAOnB,MAAOA,EAAOI,UAAWL,EAAMK,YCTxD4E,MAzBf,WAEE,OACE,yBAAK5E,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK6E,IAAKC,IAAM9E,UAAU,WAAW+E,IAAI,SACzC,mCACO,4CADP,wBAGA,6BACE,kBAACb,EAAD,OAEF,uBACElE,UAAU,WACVV,KAAK,sBACL0F,OAAO,SACPC,IAAI,uBAJN,kBCNYC,QACW,cAA7B9F,OAAOC,SAAS8F,UAEe,UAA7B/F,OAAOC,SAAS8F,UAEhB/F,OAAOC,SAAS8F,SAAS9D,MACvB,2DCXN,IAAM+D,EAAMhH,SAASiH,eAAe,QACjCD,GACCE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFJ,GAGN,IAAMK,EAAQrH,SAASiH,eAAe,mBAChC7F,EAAGgE,IAAMkC,cACZD,GACCH,IAASC,OAAO/F,EAAE0E,EAAgBuB,EAAQE,SAASF,GAG3BrH,SAASwH,iBAAiB,uBAElCC,SAAQ,SAAAC,GAC1BR,IAASC,OACP/F,EAAE8E,EAAqBwB,EAAUH,SACjCG,MDwGE,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlG,QAAQkG,MAAMA,EAAMC,c","file":"static/js/main.8cae9414.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      var cookies = document.cookie.split(';');\r\n      for (var i = 0; i < cookies.length; i++) {\r\n          var cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport function backendLookup (method, endpoint, callback, data){\r\n  let jsonData;\r\n  if(data){\r\n    jsonData= JSON.stringify(data)\r\n  }\r\n  const xhr= new XMLHttpRequest()\r\n  const url= `http://localhost:8000/api${endpoint}`\r\n  xhr.responseType= \"json\"\r\n  const csrftoken = getCookie('csrftoken');\r\n  xhr.open(method,url)\r\n  if(csrftoken){\r\n   xhr.setRequestHeader(\"Content-Type\",\"application/json\")\r\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\",\"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-Requested-With\",\"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-CSRFToken\",csrftoken)\r\n  }\r\n  xhr.onload = function() {\r\n    if (xhr.status === 403){\r\n      const detail=xhr.response.detail\r\n      if(detail === \"Authentication credentials were not provided.\"){\r\n        window.location.href=\"/login?showLoginRequired=true\"\r\n      }\r\n    }\r\n    callback(xhr.response,xhr.status)\r\n  }   \r\n  xhr.onerror =function(e){\r\n    callback({\"message\":\"request was an error\"}, 400)\r\n  }\r\n  xhr.send(jsonData)\r\n}\r\n\r\n","import React from 'react'\r\nimport {apiTweetAction} from './lookup'\r\n\r\n\r\nexport function ActionBtn(props){\r\n    const {tweet,action,didPerformAction} = props\r\n    const likes= tweet.likes? tweet.likes : 0\r\n    const className=props.className? props.className:'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display:'Action'\r\n    \r\n    const handleActionBackendEvent = (response, status) => {\r\n      console.log(response,status)\r\n      if((status === 200 || status === 201)&& didPerformAction){\r\n        //setLikes(response.likes)\r\n        didPerformAction(response,status)\r\n      }\r\n      \r\n    }\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        apiTweetAction(tweet.id, action.type ,handleActionBackendEvent)\r\n        \r\n    }\r\n    const display = action.type === 'like'? `${likes} ${actionDisplay}` : actionDisplay\r\n    \r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n}","import {backendLookup} from '../lookup'\r\nexport function apiTweetCreate(newData,callback){\r\n    backendLookup(\"POST\",\"/tweets/create/\",callback,{content:newData})\r\n}\r\n\r\nexport function apiTweetAction(tweetId, action, callback){\r\n    const data = {id:tweetId, action:action}\r\n    backendLookup(\"POST\",\"/tweets/action/\",callback,data)\r\n}\r\n\r\nexport function apiTweetDetail(tweetId,callback){\r\n    backendLookup(\"GET\",`/tweets/${tweetId}`,callback)\r\n}\r\n\r\nexport function apiTweetList(username,callback){\r\n    let endpoint=\"/tweets/\"\r\n    if(username){\r\n        endpoint = `/tweets/?username=${username}`\r\n    }\r\n    backendLookup(\"GET\",endpoint,callback)\r\n}","import React, {useState} from 'react'\r\nimport {ActionBtn} from './buttons'\r\n\r\n\r\nexport function ParentTweet(props){\r\n    const {tweet} = props\r\n    return tweet.parent ? <div className='row'>\r\n      <div className='col-11 mx-auto p-3 border rounded'>\r\n        <p className='mb-0 text-muted small'>Retweet</p>\r\n        <Tweet hideActions className={' '} tweet={tweet.parent} />\r\n      </div>\r\n    </div>: null\r\n  }\r\n  \r\nexport function Tweet(props){\r\n    const {tweet,didRetweet,hideActions}=props\r\n    const [actionTweet,setActionTweet] = useState(props.tweet ? props.tweet : null)\r\n    const className=props.className? props.className:'col-10 mx-auto col-md-6'\r\n    const path = window.location.pathname\r\n    const match = path.match(/(?<tweetid>\\d+)/)\r\n    const urlTweetId = match ? match.groups.tweetid : -1\r\n    const isDetail = `${urlTweetId}`===`${tweet.id}`\r\n    const handleSubmit = (event) =>{\r\n      event.preventDefault()\r\n      window.location.href = `/${tweet.id}`\r\n    }\r\n\r\n    const handlePerformAction = (newActionTweet,status) => {\r\n    if(status === 200){\r\n        setActionTweet(newActionTweet)\r\n    }else if(status === 201){\r\n        if(didRetweet){\r\n        didRetweet(newActionTweet)\r\n        }\r\n    }\r\n    }\r\n    \r\n    return <div className={className}> \r\n      <div>\r\n          <p>{tweet.id} - {tweet.content}</p>\r\n          <ParentTweet tweet={tweet} />\r\n      </div>\r\n      <div className='btn btn-group'>\r\n        {(hideActions !== true && actionTweet) && <React.Fragment>\r\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"like\",display:\"Likes\"}}/>\r\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"unlike\",display:\"Unlike\"}}/>\r\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"retweet\",display:\"Retweet\"}}/>\r\n          </React.Fragment>  \r\n        }\r\n        { isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleSubmit} >View</button>}\r\n      </div>\r\n    </div>\r\n}","import React, {useEffect,useState} from 'react'\r\nimport {apiTweetList} from './lookup' \r\nimport {Tweet} from './detail'\r\n\r\nexport function TweetsList(props){\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets,setTweets] = useState([])\r\n    const [tweetsDidSet,setTweetsDidSet] = useState(false)\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if(final.length !== tweets.length){\r\n            setTweets(final)\r\n        }\r\n    },[props.newTweets,tweets,tweetsInit])\r\n    useEffect(() => {\r\n      if(tweetsDidSet === false){\r\n        const handleTweetListLookup = (response,status) => {\r\n        // console.log(status)\r\n        if ( status === 200 ){\r\n          setTweetsInit(response)\r\n          setTweetsDidSet(true)\r\n        }else{\r\n          //console.log(response,status)\r\n          alert(\"There was an error!!\")\r\n        }\r\n      }\r\n      apiTweetList(props.username,handleTweetListLookup)\r\n      }\r\n    }, [tweetsInit,tweetsDidSet,setTweetsDidSet,props.username])\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n      const updateTweetsInit = [...tweetsInit]\r\n      updateTweetsInit.unshift(newTweet)\r\n      setTweetsInit(updateTweetsInit)\r\n      const updateFinalTweets = [...tweets]\r\n      updateFinalTweets.unshift(tweets)\r\n      setTweets(updateFinalTweets)\r\n    }\r\n\r\n    return tweets.map((item, index)=>{\r\n      return <Tweet \r\n        tweet={item}\r\n        didRetweet={handleDidRetweet}\r\n        className='my-5 py-5 border bg-white text-dark' \r\n        key={`${index}-{tweet.id}`}/>\r\n    })\r\n  }","import React from 'react' \r\nimport {apiTweetCreate} from './lookup' \r\n\r\n\r\nexport function TweetCreate(props){\r\n    const TextAreaRef = React.createRef()\r\n    const {didTweet} = props\r\n    const handleBackendUpdate = (response, status) => {\r\n      if(status === 201){\r\n        didTweet(response)\r\n      }else{\r\n        console.log(response)\r\n        alert(\"Error occured!!\")\r\n      }\r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = TextAreaRef.current.value\r\n        // baceend api request\r\n        apiTweetCreate(newVal,handleBackendUpdate)\r\n        TextAreaRef.current.value=''\r\n    }\r\n    return <div className={props.className}>\r\n      <form onSubmit={handleSubmit}>\r\n          <textarea ref={TextAreaRef} required={true} className='form-control' name='tweet'></textarea>\r\n          <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n      </form>\r\n  \r\n    </div>\r\n  }","import React, {useEffect,useState} from 'react'\r\nimport {Tweet} from './detail'\r\nimport {TweetsList} from './list'\r\nimport {apiTweetDetail} from './lookup'\r\nimport {TweetCreate} from './create'\r\n\r\nexport function TweetComponents(props){\r\n  const [newTweets, setNewTweets] =useState([])\r\n  \r\n  const canTweet = props.canTweet === \"false\"? false:true\r\n  const handleNewTweet = (newTweet) => {\r\n    let tempNewTweets = [...newTweets]\r\n    tempNewTweets.unshift(newTweet)\r\n    setNewTweets(tempNewTweets)\r\n  }\r\n  return <div className={props.className}>\r\n    {canTweet===true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\r\n    <TweetsList newTweets={newTweets} {...props}/>\r\n  </div>\r\n}\r\n\r\nexport function TweetDetailComponent(props){\r\n  const {tweetId} = props\r\n  const [didLookup,setDidLookup] = useState(false)\r\n  const [tweet,setTweet] = useState(null)\r\n  const handleBackendLookup= (response,status)=>{\r\n    if( status === 200){\r\n      setTweet(response)\r\n    }else{\r\n      alert(\"Error in finding your tweet\")\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if (didLookup === false){\r\n      apiTweetDetail(tweetId, handleBackendLookup)\r\n      setDidLookup(true)\r\n    }\r\n  },[tweetId,didLookup,setDidLookup])\r\n  \r\n  return tweet === null ? null : <Tweet tweet={tweet} className={props.className} /> \r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TweetComponents } from './tweets';\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetComponents/>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetComponents,TweetDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl=document.getElementById('root')\nif(appEl){\n    ReactDOM.render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>,\n      appEl\n    );\n  }\nconst tweetEl=document.getElementById('aitconnects-web')\nconst e =React.createElement\nif(tweetEl){\n    ReactDOM.render(e(TweetComponents,tweetEl.dataset),tweetEl);\n  }\n\nconst tweetDetailElements = document.querySelectorAll(\".aitconnects-detail\")\n\ntweetDetailElements.forEach(container=> {\n  ReactDOM.render(\n    e(TweetDetailComponent,container.dataset),\n    container);\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}